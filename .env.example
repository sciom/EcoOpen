## Copy this file to .env and adjust values as needed.
# Do not commit your real .env with secrets.

# Agent / LLM (OpenAI-compatible or Ollama)
# For Ollama, you can use the root host (no /v1) and the client will try /api/chat and /api/generate automatically.
AGENT_BASE_URL=http://localhost:11434
# Example remote (uncomment and adjust):
# AGENT_BASE_URL=https://your-ollama-or-proxy.example

# Agent model id â€” use the exact model tag present on the target (e.g., gpt-oss:120b or gpt-oss:120b-q4_K_M)
AGENT_MODEL=llama3.1
# Example remote model:
# AGENT_MODEL=gpt-oss:120b

# Optional bearer token if your endpoint enforces auth
# AGENT_API_KEY=sk-...
AGENT_API_KEY=

# Increase for large remote models to avoid timeouts (seconds)
AGENT_TIMEOUT_SECONDS=300

# Local embeddings / Ollama
OLLAMA_HOST=http://localhost:11434
# Local LLM for the legacy analyzer (fallback)
OLLAMA_MODEL=phi3:mini
# Embeddings model (used by AgentRunner + vector store)
OLLAMA_EMBED_MODEL=nomic-embed-text

# App & Extraction Repair
MAX_FILE_SIZE_MB=50
# JSON array or comma-separated allowed origins for CORS
CORS_ORIGINS=["http://localhost:5173","http://127.0.0.1:5173"]
LOG_LEVEL=INFO

# Expand availability statements to full paragraph/sentence boundaries
REPAIR_CONTEXT_ENABLED=true
# Repair and normalize URLs (reconstruct line-break splits, trim punctuation)
REPAIR_URLS_ENABLED=true

# ChromaDB persistence directory
CHROMA_DB_PATH=./chroma_db

# MongoDB
MONGO_URI=mongodb://localhost:27017
MONGO_DB_NAME=ecoopen

# Worker concurrency (Mongo-based background worker)
QUEUE_CONCURRENCY=1

# Auth (JWT)
# Used to sign and verify access tokens for API authentication.
# Change this in production and keep it secret.
JWT_SECRET=change-me-in-prod
# Algorithm for JWT signing
JWT_ALGORITHM=HS256
# Token lifetime in minutes
JWT_EXPIRES_MINUTES=60
